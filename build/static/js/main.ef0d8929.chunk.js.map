{"version":3,"sources":["logo.svg","Component/User/Reducer/StarwarReducer.js","Component/Context/StarwarContext.js","Api.js","Component/User/SignIn.js","Layout/PublicRoute.js","Layout/PublicLayout.js","Common/Header/Menu.js","Common/Header/Header.js","Layout/PrivateRoute.js","Component/User/Suggestions.js","Component/User/Search.js","Component/User/PlanetInfo.js","Component/User/SearchStarwars.js","Layout/PrivateLayout.js","Common/Nomatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","commonReducer","currentState","action","type","isloader","value","isloggedIn","Error","userReducer","currentuser","data","StarWarContext","createContext","commonState","userState","StarWarContextProvider","props","useReducer","commondata","dispatchcommon","userdata","dispatchuser","Provider","children","axios","create","baseURL","SignIn","useState","payload","setPayload","error","setError","useContext","handleBlur","target","name","Container","fluid","className","Row","Col","md","to","title","style","width","src","alt","Form","onSubmit","e","preventDefault","API","email","then","response","userData","results","filter","user","birth_year","password","length","sessionStorage","setItem","history","push","method","Group","controlId","Control","onBlur","required","placeholder","Button","variant","PublicRoute","Component","component","restricted","rest","getItem","render","Boolean","PrivateLayout","loaderWrapClass","loaderClass","color","height","timeout","visible","exact","path","Menu","signinsignout","onClick","removeItem","handleOnclick","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Header","PrivateRoute","Suggestions","React","memo","planetsData","options","map","index","url","population","key","Search","planetData","setPlanetData","planetsearchName","setPlanetSearchName","useEffect","searchName","planetDataEmpty","onChange","planetname","handleSeachChange","planetDatas","handleInputChange","PlanetInfo","planetDetails","isEmpty","Card","Body","Title","diameter","climate","orbital_period","SearchStarwars","setPlanetDetails","setPlanetDataEmpty","setSearchName","useCallback","planeturl","replace","get","PublicLayout","Nomatch","createBrowserHistory","App","library","add","fab","faMapMarker","faPhone","faEnvelope","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef0d8929.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nexport const commonReducer = (currentState,action) =>{\r\n  switch (action.type) {\r\n    case 'SETLOADER':\r\n    return {...currentState,isloader:action.value};\r\n    case 'SIGNIN':\r\n    return {...currentState, isloggedIn:true}\r\n    default:\r\n      throw new Error('Should not get there!');\r\n  }\r\n};\r\n\r\n\r\nexport const userReducer = (currentState,action) =>{\r\n  switch (action.type) {\r\n    case 'SETUSER':\r\n    return {currentuser:action.data};\r\n    default:\r\n      throw new Error('Should not get there!');\r\n  }\r\n};\r\n\r\n","import React,{ createContext, useState, useReducer} from 'react';\r\nimport {listReducer, commonReducer, userReducer} from '../User/Reducer/StarwarReducer';\r\n \r\nexport const StarWarContext = createContext();\r\n \r\nconst commonState = {\r\n    isloader:false,\r\n    isloggedIn:false\r\n}\r\n\r\nconst userState = {\r\n    currentuser:{},\r\n}\r\n \r\nconst StarWarContextProvider = (props) =>{\r\n    const [commondata, dispatchcommon] = useReducer(commonReducer,commonState);\r\n    const [userdata, dispatchuser] = useReducer(userReducer,userState);\r\n    return(\r\n        <StarWarContext.Provider value={{userdata, dispatchuser, commondata, dispatchcommon}}>\r\n            {props.children}\r\n        </StarWarContext.Provider>\r\n    )\r\n \r\n}\r\nexport default StarWarContextProvider;\r\n \r\n ","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: `https://swapi.dev/api/`\r\n});","import React,{Fragment, useState, useContext} from 'react';\r\nimport './SignIn.css';\r\nimport { Container, Row, Col,Form, Button  } from 'react-bootstrap';\r\nimport {\r\n    NavLink\r\n  } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport {StarWarContext} from '../Context/StarwarContext';\r\n\r\nimport API from './../../Api';\r\n\r\n\r\nconst SignIn = (props)=>{\r\n\r\n    const [payload, setPayload] = useState({});\r\n    const [error, setError] = useState('');\r\n    const {dispatchcommon, dispatchuser} = useContext(StarWarContext);\r\n    const handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        dispatchcommon({\r\n            type:'SETLOADER',\r\n            value:true,\r\n        });\r\n        API(`people?search=${payload.email}`)\r\n            .then(response=>{\r\n                dispatchcommon({\r\n                    type:'SETLOADER',\r\n                    value:false,\r\n                });\r\n                let userDatas = response.data.results;\r\n                let userData = userDatas.filter((user)=>{\r\n                    return(\r\n                        user.name == payload.email && user.birth_year == payload.password\r\n                    )\r\n                })\r\n                setPayload({});\r\n                if(userData.length>0){\r\n                    dispatchuser({\r\n                        type:'SETUSER',\r\n                        data:userData,\r\n                    });\r\n                    dispatchcommon({\r\n                        type:'SIGNIN',\r\n                        value:true,\r\n                    });\r\n                    sessionStorage.setItem('isLoggedIn', true);\r\n                    props.history.push('/starwar/search');\r\n                }else{\r\n                    setError('Name and Birth does not match');\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const handleBlur=({target})=>{\r\n        setError('');\r\n        setPayload({\r\n            ...payload,\r\n            [target.name]:target.value\r\n        });  \r\n    }\r\n    \r\n    return(      \r\n        <Fragment>\r\n            <Container fluid className=\"signinpage\">\r\n                <Row className=\"sign-logo-wrap\">\r\n                    <Col md={12}>\r\n                        <NavLink className=\"logo\" to=\"/\" title=\"Star Wars\">\r\n                            <img style={{width:\"120px\"}} src=\"/images/logo.png\" title=\"Star Wars\" alt=\"Star Wars\"/>\r\n                        </NavLink>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"logincard\">\r\n                    <Col md={12} className=\"loginCard_banner\">\r\n                        Sign In As Star Wars Character\r\n                    </Col>\r\n                    <div className=\"formcontainer\">\r\n                        <div className=\"d-heading loginCard__heading\">Login</div>\r\n                        <Form onSubmit={(e)=>handleSubmit(e)} method=\"post\">\r\n                                <Form.Group controlId=\"formGridEmail\">\r\n                                    <Form.Control onBlur={(e)=>handleBlur(e)} name=\"email\" required type=\"text\" placeholder=\"Enter star war character name\" />\r\n                                </Form.Group>\r\n                                <Form.Group  controlId=\"formGridPassword\">\r\n                                    <Form.Control onBlur={(e)=>handleBlur(e)} name=\"password\" required type=\"password\" placeholder=\"Birth year of character\" />\r\n                                </Form.Group>\r\n                                {\r\n                                    (error!='') && <p><span className=\"error\">{error}</span></p>\r\n                                }\r\n                            <Button variant=\"primary\" className=\"signBtn\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\nexport default SignIn;","import React, {useContext} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport {StarWarContext} from '../Component/Context/StarwarContext';\r\n\r\nconst PublicRoute = ({component: Component, restricted, ...rest}) => {\r\n    const isloggedIn = sessionStorage.getItem('isLoggedIn');\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            Boolean(isloggedIn) && restricted ?\r\n                <Redirect to=\"/starwar/search\" />\r\n            : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;","import React,{Fragment, useContext} from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\n  import SignIn from '../Component/User/SignIn';\r\n  import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n  import Loader from 'react-loader-spinner';\r\n  import {StarWarContext} from '../Component/Context/StarwarContext';\r\n  import PublicRoute from './PublicRoute';\r\n\r\n\r\n  const PrivateLayout = (props)=>{\r\n    const {commondata:{isloader}} = useContext(StarWarContext);\r\n    const loaderWrapClass = isloader ? \"loadershow\" : \"hidden\";\r\n    const loaderClass = isloader ? \"\" : \"hidden\";\r\n      return(\r\n        <Fragment>\r\n            <div className={`loaderWrap private ${loaderWrapClass} `}>\r\n                <div className={`loader ${loaderClass}`}>\r\n                    <Loader\r\n                        type=\"Puff\"\r\n                        color=\"#00BFFF\"\r\n                        height={100}\r\n                        width={100}\r\n                        timeout={500000000} //3 secs\r\n                        visible={isloader}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <PublicRoute restricted={true} exact path=\"/\" component={SignIn} />\r\n            </Switch>\r\n        </Fragment>\r\n      )\r\n  }\r\n  export default PrivateLayout;","import React from 'react';\r\nimport { Container, Navbar, Nav, Row, Image } from 'react-bootstrap';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    NavLink,\r\n    useParams\r\n  } from \"react-router-dom\";\r\nconst Menu = (props) =>{\r\n    const handleOnclick = (e) =>{\r\n        e.preventDefault();\r\n        sessionStorage.removeItem(\"isLoggedIn\");\r\n        props.history.push('/');\r\n    }\r\n    const isloggedIn = sessionStorage.getItem('isLoggedIn');\r\n    let signinsignout = '';\r\n    if(isloggedIn){\r\n        signinsignout = <a className=\"nav-link parentlink\" onClick={(e)=>{handleOnclick(e)}}>Sign Out</a>;\r\n    }else{\r\n        signinsignout = <NavLink className=\"nav-link parentlink\" to=\"/sign-in\">Sign In</NavLink>;\r\n    }\r\n    return(\r\n        <Navbar  bg=\"light\" expand=\"lg\">\r\n            <Container className=\"topmenu\" fluid>\r\n                <Navbar.Brand href=\"/\" className=\"logo\">\r\n                <img style={{width:\"120px\"}} src=\"/images/logo.png\" title=\"Weaver\" alt=\"Weaver\"/>\r\n\r\n                </Navbar.Brand>\r\n                                                       \r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    <div className=\"mainmenu pull-right\">\r\n                        {signinsignout}\r\n                    </div>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default Menu;","import React,{useState, useEffect} from 'react';\r\nimport './Header.css';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Menu from './Menu';\r\n\r\nconst Header =(props)=>{\r\n    return(\r\n        <Container id=\"headerContainer\" fluid>\r\n            <header>\r\n                <Row>\r\n                </Row>\r\n                <Menu history={props.history}/>\r\n            </header>\r\n        </Container>\r\n    )\r\n}\r\nexport default Header;","import React,  {useContext}  from 'react';\r\nimport {\r\n    Route,\r\n    Redirect,\r\n  } from \"react-router-dom\";\r\nimport { tsImportEqualsDeclaration } from '@babel/types';\r\nimport {StarWarContext} from '../Component/Context/StarwarContext';\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n  const isloggedIn = sessionStorage.getItem('isLoggedIn');\r\n  return (\r\n      <Route {...rest} render={props => (\r\n        Boolean(isloggedIn) === true ?\r\n          <Component {...props} />\r\n          : <Redirect to=\"/\" />\r\n      )} />\r\n  );\r\n};\r\nexport default PrivateRoute;","import React from 'react'\r\n\r\nconst Suggestions = React.memo(({planetsData, handleOnclick}) => {\r\n    if(planetsData.length>0){\r\n        const options = planetsData.map(({name,url, population},index) => (\r\n        <li key={index}>\r\n            <a onClick={(e)=>handleOnclick(e)} href={url} id={name}>{name}</a>\r\n        </li>\r\n    ))\r\n        return <ul className=\"dropdownOption\">{options}</ul>\r\n    }else{\r\n        return ''\r\n    }\r\n});\r\n\r\nexport default Suggestions","\r\nimport React,{Fragment, useState, useContext, useEffect} from 'react';\r\nimport { Container, Row, Col,Form, Button  } from 'react-bootstrap';\r\nimport './Search.css';\r\nimport axios from 'axios';\r\nimport {StarWarContext} from '../Context/StarwarContext';\r\nimport API from './../../Api';\r\nimport Suggestions from './Suggestions'\r\n\r\nconst Search = React.memo((props)=>{\r\n    const [planetData, setPlanetData] = useState([]);\r\n    const [planetsearchName, setPlanetSearchName] = useState('');\r\n    const {dispatchcommon, dispatchuser} = useContext(StarWarContext);\r\n\r\n    const handleInputChange = (e) =>{\r\n        e.preventDefault();\r\n        var planetname = e.target.value;\r\n        setPlanetSearchName(planetname);\r\n        props.handleSeachChange();\r\n        API(`planets?search=${planetname}`)\r\n        .then(response=>{\r\n            let planetDatas = response.data.results;\r\n            setPlanetData(planetDatas);\r\n        })\r\n\r\n    }\r\n    useEffect(()=>{\r\n        setPlanetData([]);\r\n        setPlanetSearchName(props.searchName);\r\n    },[props.planetDataEmpty,props.searchName])\r\n\r\n    return(      \r\n        <Fragment>\r\n            <div className=\"searchForm\">\r\n                <Col md={12} className=\"searchForm_banner\">\r\n                    Search <span>STARWARS</span> Planets\r\n                </Col>\r\n                <Form className=\"formforsearch\" method=\"post\" onSubmit={(e)=>e.preventDefault()}> \r\n                    <Form.Group controlId=\"formGroupPlanet\">\r\n                        <Form.Control \r\n                            type=\"text\"\r\n                            name=\"planetname\" \r\n                            placeholder=\"Enter name to search\"\r\n                            onChange={(e)=>handleInputChange(e)}\r\n                            value={planetsearchName}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n                <Suggestions\r\n                    planetsData = {planetData}\r\n                    handleOnclick = {props.handleOnclick}\r\n                />\r\n            </div>\r\n        </Fragment>\r\n    )\r\n});\r\nexport default Search;","import React,{Fragment} from 'react';\r\nimport { Container, Row, Col, Card  } from 'react-bootstrap';\r\nimport {isEmpty} from 'lodash'\r\n\r\nconst PlanetInfo = React.memo(({planetDetails})=>{\r\n    if(!isEmpty(planetDetails)){\r\n        return( \r\n            <Fragment>\r\n                <Container className=\"cardcontainer\">\r\n                <Card>\r\n                    <Card.Header><h4>Information</h4></Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title><h5>{planetDetails.name}</h5></Card.Title>\r\n                            <Row>\r\n                                <Col md={3} className='infolabel'>Population</Col>\r\n                                <Col md={8} className='infodetail'>{planetDetails.population}</Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={3} className='infolabel'>Diameter</Col>\r\n                                <Col md={8} className='infodetail'>{planetDetails.diameter}</Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={3} className='infolabel'>Climate</Col>\r\n                                <Col md={8} className='infodetail'>{planetDetails.climate}</Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={3} className='infolabel'>Orbital Period</Col>\r\n                                <Col md={8} className='infodetail'>{planetDetails.orbital_period}</Col>\r\n                            </Row>\r\n                    </Card.Body>\r\n                </Card>\r\n                </Container>\r\n            </Fragment>\r\n        )\r\n    }else{\r\n        return(\r\n            \"\"\r\n        )\r\n    }\r\n\r\n});\r\nexport default PlanetInfo;","import React,{Fragment, useState, useContext, useCallback} from 'react';\r\nimport Search from './Search';\r\nimport PlanetInfo from './PlanetInfo';\r\nimport API from './../../Api';\r\nimport axios from 'axios';\r\n\r\nconst SearchStarwars = React.memo((props)=>{\r\n    const [planetDetails, setPlanetDetails] = useState({});\r\n    const [planetDataEmpty, setPlanetDataEmpty] = useState();\r\n    const [searchName, setSearchName] = useState('');\r\n\r\n    const handleOnclick  = useCallback((e) =>{\r\n        e.preventDefault();\r\n        let planetname = e.target.id;\r\n        let planeturl = e.target.href;\r\n        planeturl.replace(\"http\", \"https\")\r\n        axios.get(planeturl)\r\n        .then(response=>{\r\n            let planetDatas = response.data;\r\n            setPlanetDetails(planetDatas);\r\n            setPlanetDataEmpty([]);\r\n            setSearchName(planetname);\r\n        })\r\n    },[])\r\n\r\n    const handleSeachChange  = useCallback((e) =>{\r\n        setPlanetDetails({});\r\n        \r\n    },[])\r\n\r\n    return( \r\n         \r\n        <Fragment>\r\n           <Search\r\n                handleOnclick={handleOnclick}\r\n                planetDataEmpty={planetDataEmpty}\r\n                searchName={searchName}\r\n                handleSeachChange={handleSeachChange}\r\n           />\r\n           <PlanetInfo planetDetails={planetDetails}/>\r\n        </Fragment>\r\n    )\r\n\r\n});\r\nexport default SearchStarwars;","import React,{Fragment, useContext} from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\nimport Header from '../Common/Header/Header';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport {StarWarContext} from '../Component/Context/StarwarContext';\r\nimport SearchStarwars from '../Component/User/SearchStarwars';\r\n\r\n  const PublicLayout = (props)=>{\r\n      return(\r\n        <Fragment>\r\n            <Header history={props.history}/>\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/starwar/search\" component={SearchStarwars}/>\r\n            </Switch>\r\n        </Fragment>\r\n      )\r\n\r\n  }\r\n  export default PublicLayout;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nconst Nomatch =()=>{\r\n    return(\r\n        <Container fluid>\r\n                <img  src=\"/images/pagenotfound.jpg\" title=\"Star Wars\" alt=\"Star Wars\"/>\r\n        </Container>\r\n    )\r\n\r\n}\r\nexport default Nomatch;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport StarWarContextProvider from './Component/Context/StarwarContext';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faMapMarker, faPhone, faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport PublicLayout from './Layout/PublicLayout';\nimport PrivateLayout from './Layout/PrivateLayout';\nimport Nomatch from './Common/Nomatch';\n\n\n \nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport { createBrowserHistory } from \"history\"\n\nconst history = createBrowserHistory();\n\nfunction App(props) {\n  library.add(fab, faMapMarker,faPhone,faEnvelope)\n  return (\n    <StarWarContextProvider>\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={PublicLayout} />\n          <Route exact path=\"/starwar/search\" component={PrivateLayout} history={history} />\n          <Route path=\"*\">\n              <Nomatch />\n          </Route>\n        </Switch>\n      </Router>\n    </StarWarContextProvider> \n  );\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}